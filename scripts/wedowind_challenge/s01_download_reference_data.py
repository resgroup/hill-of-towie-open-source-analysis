"""Download reference data from Open-Meteo API.

The code has been adapted from the autogenerated code in: https://open-meteo.com/en/docs/ecmwf-api

This script can be run with uv directly from the root of the repository:
`uv run scripts/wedowind_challenge/s01_download_reference_data.py`
"""


# /// script
# requires-python = ">=3.12"
# dependencies = [
#     "hot-open",
#     "openmeteo-requests",
#     "pandas",
#     "pyarrow",
#     "requests-cache",
#     "retry-requests",
# ]
#
# [tool.uv.sources]
# hot-open = { path = "../../" }
# ///

import openmeteo_requests
import pandas as pd
import requests_cache
from retry_requests import retry

from hot_open.paths import ANALYSES_DIR

LAT, LON = 57.50, -3.25  # Closest ERA5 node to Hill of Towie
PERIOD = "2016-01-01", "2021-01-01"
FIELDS = [
    "temperature_2m",
    "relative_humidity_2m",
    "dew_point_2m",
    "precipitation",
    "surface_pressure",
    "cloud_cover",
    "wind_speed_10m",
    "wind_speed_100m",
    "wind_direction_10m",
    "wind_direction_100m",
    "wind_gusts_10m",
]

if __name__ == "__main__":
    output_dir = ANALYSES_DIR / "wedowind_competition_input_data"

    # Setup the Open-Meteo API client with cache and retry on error
    openmeteo = openmeteo_requests.Client(
        session=retry(
            requests_cache.CachedSession(".cache", expire_after=3600),
            retries=5,
            backoff_factor=0.2,
        )
    )

    responses = openmeteo.weather_api(
        url="https://archive-api.open-meteo.com/v1/archive",
        params={
            "latitude": LAT,
            "longitude": LON,
            "start_date": PERIOD[0],
            "end_date": PERIOD[1],
            "hourly": FIELDS,
            "models": "era5",
            "wind_speed_unit": "ms",
        },
    )

    # Process first location. Add a for-loop for multiple locations or weather models
    response = responses[0]
    print(f"Coordinates {response.Latitude()}°N {response.Longitude()}°E")
    print(f"Elevation {response.Elevation()} m asl")
    print(f"Timezone {response.Timezone()}{response.TimezoneAbbreviation()}")
    print(f"Timezone difference to GMT+0 {response.UtcOffsetSeconds()} s")

    # Process hourly data. The order of variables needs to be the same as requested.
    hourly_data = response.Hourly()
    hourly_dataframe = pd.DataFrame(
        {
            "date": pd.date_range(
                start=pd.to_datetime(hourly_data.Time(), unit="s", utc=True),
                end=pd.to_datetime(hourly_data.TimeEnd(), unit="s", utc=True),
                freq=pd.Timedelta(seconds=hourly_data.Interval()),
                inclusive="left",
            )
        }
        | {field: hourly_data.Variables(i).ValuesAsNumpy() for i, field in enumerate(FIELDS)}
    )

    print(hourly_dataframe.describe())

    fpath = output_dir / f"ERA5_{LAT:.2f}_{LON:.2f}.parquet"
    hourly_dataframe.to_parquet(fpath)
