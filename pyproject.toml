[project]
name = "hot_open"
dynamic = ["version"]
description = "Project for open analysis of the Hill of Towie SCADA open source dataset"
authors = [
    { name = "Alex Clerc", email = "alex.clerc@res-group.com" }
]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "pandas>=2.2.3",
    "res-wind-up>=0.2.0",
    "requests>=2.32.3",
    "tqdm>=4.67.0",
    "python-dotenv>=1.1.0",
]

[dependency-groups]
dev = [
    "pytest>=8.2.2",
    "poethepoet>=0.27.0",
    "ruff>=0.5.0",
    "mypy>=1.10.1",
    "coverage>=7.5.4",
    "deptry>=0.20.0",
    "pandas-stubs>=2.2.2.240603",
    "types-pyyaml>=6.0.12.20241230",
    "scipy-stubs>=1.15.2.1",
    "types-requests>=2.32.0.20250328",
    "types-tqdm>=4.67.0.20250404",
    "responses>=0.25.7",
    "polars>=1.27.1",
]
wedowind = [
    "jupyterlab>=4.4.1",
    "jupytext>=1.17.0",
    "openmeteo-requests>=1.4.0",
    "plotly>=6.0.1",
    "polars>=1.27.1",
    "requests-cache>=1.2.1",
    "retry-requests>=2.0.0",
    "xarray>=2025.4.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/hot_open/__init__.py"

[tool.ruff]
line-length = 120
target-version = "py310"
show-fixes = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D203", # `one-blank-line-before-class` conflicts with D211 `blank-line-before-class`
    "D213", # 'multi-line-summary-second-line' conflicts with D212 'multi-line-summary-starts-with-capital-letter'
    "COM812", # can conflict with formatter
    "ISC001", # can conflict with formatter
    "ANN204", # `__init__` doesn't need annotations
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D"]
"uplift_analysis/*.py" = ["N999"]
"scripts/**/*.py" = ["D100", "INP001", "ERA001", "T201", "ARG002", "N803", "N806", "N802", "D102", "PD010"]
"tests/**/*.py" = [
    "S101", # allow `assert`
    "PLR2004", # allow magic values
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
]

[tool.mypy]
python_version = "3.10"
exclude = ".venv|__ignore__"

[[tool.mypy.overrides]]
module = [
    "wind_up.*",
    "plotly.*",
    "openmeteo_requests.*",
    "retry_requests.*",
    "requests_cache.*",
    "polars.*"
]
ignore_missing_imports = true

[tool.deptry]
extend_exclude = ["scripts"]

[tool.deptry.per_rule_ignores]
DEP003 = ["hot_open"]

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:"]


[tool.poe.tasks]
[tool.poe.tasks.lint]
help = "Runs formater and linter"
sequence = [
    { cmd = "ruff format ." },
    { cmd = "ruff check . --fix" },
    { cmd = "mypy ." },
    { cmd = "deptry ." },
]

[tool.poe.tasks.lint-check]
help = "Checks using formater and linter"
sequence = [
    { cmd = "ruff format . --check" },
    { cmd = "ruff check ." },
    { cmd = "mypy ." },
    { cmd = "deptry ." },
]

[tool.poe.tasks.test]
help = "Runs unit tests and show coverage"
sequence = [
    { cmd = "coverage run --source src -m pytest ./tests" },
    { cmd = "coverage report -m" },
]

[tool.poe.tasks.all]
help = "Run all required pre-push commands"
sequence = [{ ref = "lint" }, { ref = "test" }]
